
type DailySale {
    dailySaleId: ID!
    agentId: Int!
    clientId: Int!
    utilityId: Int!
    campaignId: Int!
    contactId: Int!
    podAccount: Int!
    status: Int!
    paidStatus: Int
    payCycleId: Int
    hasGeo: Boolean!
    saleDate: DateTime!
    lastTouchDate: DateTime!
    createdAt: DateTime
    updatedAt: DateTime
    paidDate: DateTime
    chargeDate: DateTime
    repaidDate: DateTime
    contact: Contact @hasOne
    campaign: Campaign @hasOne
    utility: Utility @hasOne
}

extend type Query {
    dailySales: [DailySale!]! @all @middleware(checks: ["auth:api"])
}

extend type Mutation {
    createDailySale(
        agent_id: Int!
        client_id: Int!
        campaign_id: Int!
        utility_id: Int!
        contact_id: Int!
        pod_account: Int!
        status: Int!
        paid_status: Int
        pay_cycle_id: Int
        has_geo: Boolean
        sale_date: DateTime!
        last_touch_date: DateTime!
        paid_date: DateTime
        charge_date: DateTime
        repaid_date: DateTime
    ): DailySale @create @middleware(checks: ["auth:api"])

    # imports a list of daily_sales and assumes that they have geocoding information with them 
    saveDailySales(input: [DailySaleInput!]!): [DailySaleInput]! @middleware(checks: ["auth:api"])
}

input DailySaleInput {
    daily_sale_id: Int,
    agent_id: Int,
    client_id: Int,
    utility_id: Int,
    contact_id: Int,
    pod_account: Int,
    status: Int,
    paid_status: Int,
    pay_cycle_id: Int,
    has_geo: Boolean,
    sale_date: DateTime,
    last_touch_date: DateTime,
    paid_date: DateTime,
    charge_date: DateTime,
    repaid_date: DateTime
}