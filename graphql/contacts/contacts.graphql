
type Contact {
    contactId: ID!
    clientId: Int!
    contactType: Int!
    businessName: String
    firstName: String!
    lastName: String!
    middleName: String
    prefix: String
    suffix: String
    ssn: Int
    dob: DateTime
    street: String!
    street2: String
    city: String!
    state: String!
    zip: String!
    phoneCountry: Int
    phone: Int
    email: String
    faxCountry: Int
    fax: Int
}

extend type Query {
    contacts: [Contact!]! @all @middleware(checks: ["auth:api"])
    contactByFullName(first_name: String @eq, last_name: String @eq): Contact! @find @middleware(checks: ["auth:api"])
}

extend type Mutation {
    createContact(
        client_id: Int!
        first_name: String!
        last_name: String!
        business_name: String
        middle_name: String
        prefix: String
        suffix: String
        ssn: Int
        dob: DateTime
        street: String!
        street2: String
        city: String!
        state: String!
        zip: String!
        phoneCountry: Int
        phone: Int
        email: String
        faxCountry: Int
        fax: Int
    ): Contact @create @middleware(checks: ["auth:api"])
    newContactList(input: [ContactInput]!): [ContactInput]! @middleware(checks: ["auth:api"])
}

input ContactInput {
    client_id: Int
    contact_type: Int
    first_name: String
    last_name: String
    business_name: String
    middle_name: String
    prefix: String
    suffix: String
    ssn: Int
    dob: DateTime
    street: String
    street2: String
    city: String
    state: String
    zip: String
    phoneCountry: Int
    phone: Int
    email: String
    faxCountry: Int
    fax: Int
}